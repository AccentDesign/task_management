{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/avatar.component.html","webpack:///./src/app/components/avatar.component.ts","webpack:///./src/app/components/task-board-filter.component.html","webpack:///./src/app/components/task-board-filter.component.ts","webpack:///./src/app/components/task-board.component.html","webpack:///./src/app/components/task-board.component.ts","webpack:///./src/app/components/task-card.component.html","webpack:///./src/app/components/task-card.component.ts","webpack:///./src/app/components/task-create-form.component.html","webpack:///./src/app/components/task-create-form.component.ts","webpack:///./src/app/components/task-form.component.html","webpack:///./src/app/components/task-form.component.ts","webpack:///./src/app/directives/auto-resize.directive.ts","webpack:///./src/app/forms/base.form.ts","webpack:///./src/app/forms/task-assignee.form.ts","webpack:///./src/app/forms/task-create.form.ts","webpack:///./src/app/forms/task-description.form.ts","webpack:///./src/app/forms/task-job.form.ts","webpack:///./src/app/forms/task-note.form.ts","webpack:///./src/app/forms/task-target-date.form.ts","webpack:///./src/app/forms/task-title.form.ts","webpack:///./src/app/services/api.ts","webpack:///./src/app/state/actions/client.ts","webpack:///./src/app/state/actions/data.ts","webpack:///./src/app/state/actions/filters.ts","webpack:///./src/app/state/actions/http.ts","webpack:///./src/app/state/actions/index.ts","webpack:///./src/app/state/actions/job.ts","webpack:///./src/app/state/actions/me.ts","webpack:///./src/app/state/actions/task.ts","webpack:///./src/app/state/actions/taskassignee.ts","webpack:///./src/app/state/actions/tasknote.ts","webpack:///./src/app/state/actions/taskstatus.ts","webpack:///./src/app/state/actions/user.ts","webpack:///./src/app/state/api.ts","webpack:///./src/app/state/effects/client.ts","webpack:///./src/app/state/effects/data.ts","webpack:///./src/app/state/effects/index.ts","webpack:///./src/app/state/effects/job.ts","webpack:///./src/app/state/effects/me.ts","webpack:///./src/app/state/effects/task.ts","webpack:///./src/app/state/effects/taskassignee.ts","webpack:///./src/app/state/effects/tasknote.ts","webpack:///./src/app/state/effects/taskstatus.ts","webpack:///./src/app/state/effects/user.ts","webpack:///./src/app/state/generics.ts","webpack:///./src/app/state/reducers/client.ts","webpack:///./src/app/state/reducers/filter.ts","webpack:///./src/app/state/reducers/job.ts","webpack:///./src/app/state/reducers/me.ts","webpack:///./src/app/state/reducers/task.ts","webpack:///./src/app/state/reducers/taskassignee.ts","webpack:///./src/app/state/reducers/tasknote.ts","webpack:///./src/app/state/reducers/taskstatus.ts","webpack:///./src/app/state/reducers/user.ts","webpack:///./src/app/state/selectors/job.ts","webpack:///./src/app/state/selectors/task.ts","webpack:///./src/app/state/selectors/taskboard.ts","webpack:///./src/app/state/selectors/user.ts","webpack:///./src/app/state/state.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<task-board></task-board>\"","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    host: {'class': 'd-flex flex-fill flex-column'}\n})\nexport class AppComponent {}\n","import * as actions from './state/actions';\n\nimport { AppState, reducers } from './state/state';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule, HttpClientXsrfModule } from '@angular/common/http';\nimport { Store, StoreModule } from '@ngrx/store';\n\nimport { AppComponent } from './app.component';\nimport { AutoResizeDirective } from './directives/auto-resize.directive';\nimport { AvatarComponent } from './components/avatar.component';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { EffectsModule } from '@ngrx/effects';\nimport { NgModule } from '@angular/core';\nimport { NgxDnDModule } from '@swimlane/ngx-dnd';\nimport { TaskCardComponent } from './components/task-card.component';\nimport { TaskCreateFormComponent } from './components/task-create-form.component';\nimport { TaskFormComponent } from './components/task-form.component';\nimport { TaskboardComponent } from './components/task-board.component';\nimport { TaskboardFilterComponent } from './components/task-board-filter.component';\nimport { effects } from './state/effects';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        AutoResizeDirective,\n        AvatarComponent,\n        TaskboardComponent,\n        TaskboardFilterComponent,\n        TaskCardComponent,\n        TaskCreateFormComponent,\n        TaskFormComponent\n    ],\n    imports: [\n        BrowserModule,\n        EffectsModule.forRoot(effects),\n        FormsModule,\n        HttpClientModule,\n        HttpClientXsrfModule.withOptions({\n            cookieName: 'csrftoken',\n            headerName: 'X-CSRFTOKEN'\n        }),\n        NgxDnDModule,\n        ReactiveFormsModule,\n        StoreModule.forRoot(reducers)\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n\n    constructor(private store: Store<AppState>) {\n        store.dispatch({ type: actions.DataActions.LOAD_DATA });\n    }\n\n}\n","module.exports = \"<div class=\\\"avatar-text\\\">{{ (user | async)?.initials }}</div>\"","import * as _ from 'lodash';\n\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\n\nimport { AppState } from '../state/state';\nimport { IUser } from '../state/reducers/user';\nimport { Observable } from 'rxjs';\nimport { getUserById } from '../state/selectors/user';\n\n@Component({\n    selector: '[avatar]',\n    templateUrl: './avatar.component.html'\n})\nexport class AvatarComponent implements OnChanges {\n    @Input() id: number;\n\n    user: Observable<IUser>;\n\n    constructor(private store: Store<AppState>) {}\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (_.has(changes, 'id.currentValue')) {\n            this.user = this.store.pipe(select(getUserById(this.id)));\n        }\n    }\n}\n\n","module.exports = \"<div class=\\\"filter-box\\\">\\n    <a class=\\\"pointer\\\" (click)=\\\"open=!open\\\">Filter <i class=\\\"icon-down-open\\\"></i></a>\\n    <div class=\\\"filter-options\\\" *ngIf=\\\"open\\\">\\n        <label>User</label>\\n        <select [(ngModel)]=\\\"filters.user\\\" (ngModelChange)=\\\"onUserChange($event)\\\">\\n            <option *ngFor=\\\"let option of users$ | async\\\" [ngValue]=\\\"option.id\\\">{{ option.full_name }}</option>\\n        </select>\\n        <label>Client</label>\\n        <select [(ngModel)]=\\\"filters.client\\\" (ngModelChange)=\\\"onClientChange($event)\\\">\\n            <option [ngValue]=\\\"null\\\">---------</option>\\n            <option *ngFor=\\\"let option of clients$ | async\\\" [ngValue]=\\\"option.id\\\">{{ option.name }}</option>\\n        </select>\\n        <label>Job</label>\\n        <select [(ngModel)]=\\\"filters.job\\\" (ngModelChange)=\\\"onJobChange($event)\\\">\\n            <option [ngValue]=\\\"null\\\">---------</option>\\n            <ng-container *ngFor=\\\"let option of jobs$ | async\\\">\\n                <option *ngIf=\\\"option.client === filters.client\\\" [ngValue]=\\\"option.id\\\">{{ option.title }}</option>\\n            </ng-container>\\n        </select>\\n        <label>Overdue</label>\\n        <div class=\\\"checkbox\\\">\\n            <label>\\n                <input type=\\\"checkbox\\\" [(ngModel)]=\\\"filters.overdue\\\" (ngModelChange)=\\\"onOverdueChange($event)\\\">\\n                <span></span>\\n            </label>\\n        </div>\\n    </div>\\n</div>\"","import * as actions from '../state/actions';\n\nimport { Component, Input } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { getClientState, getFilterState, getMeState, getUserState } from './../state/state';\n\nimport { AppState } from '../state/state';\nimport { IClient } from './../state/reducers/client';\nimport { IFilter } from './../state/reducers/filter';\nimport { IJob } from './../state/reducers/job';\nimport { IUser } from './../state/reducers/user';\nimport { Observable } from 'rxjs';\nimport { getJobCollection } from '../state/selectors/job';\n\n@Component({\n    selector: 'task-board-filter, [task-board-filter]',\n    templateUrl: './task-board-filter.component.html'\n})\nexport class TaskboardFilterComponent {\n    \n    @Input() client: number = null;\n    @Input() job: number = null;\n    @Input() user: number = null;\n    \n    users$: Observable<IUser[]>;\n    clients$: Observable<IClient[]>;\n    jobs$: Observable<IJob[]>;\n    \n    filters: IFilter;\n    open: false;\n    \n    constructor(private store: Store<AppState>) {\n        this.clients$ = store.pipe(select(getClientState));\n        this.jobs$ = store.pipe(select(getJobCollection));\n        this.users$ = store.pipe(select(getUserState));\n        this.store.pipe(select(getMeState)).subscribe(m => this.onUserChange(m.id));\n        this.store.pipe(select(getFilterState)).subscribe(f => this.filters = f);\n    }\n    \n    onClientChange(id: number) {\n        console.log(id);\n        this.store.dispatch({ type: actions.FilterActions.CLIENT, payload: id });\n        this.store.dispatch({ type: actions.FilterActions.JOB, payload: null });\n    }\n\n    onJobChange(id: number) {\n        this.store.dispatch({ type: actions.FilterActions.JOB, payload: id });\n    }\n\n    onOverdueChange(value: boolean) {\n        this.store.dispatch({ type: actions.FilterActions.OVERDUE, payload: value });\n    }\n\n    onUserChange(id: number) {\n        this.store.dispatch({ type: actions.FilterActions.USER, payload: id });\n    }\n}\n","module.exports = \"<div class=\\\"page-header py-2\\\">\\n    <div class=\\\"container-fluid d-flex align-items-center c-white\\\">\\n        <div class=\\\"h2 mr-2\\\">Taskboard</div>\\n        <ng-container *ngIf=\\\"this.statsForTaskboard$ | async as stats\\\">\\n            <div class=\\\"mr-2\\\"><strong>Number of tasks</strong> {{ stats.count_of_tasks }}</div>\\n            <div class=\\\"mr-2\\\"><strong>Allocated hours</strong> {{ stats.allocated_hours }}</div>\\n            <div><strong>Overdue tasks</strong> {{ stats.count_of_overdue }}</div>\\n        </ng-container>\\n        <div class=\\\"page-header-actions\\\">\\n            <task-board-filter></task-board-filter>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"container-fluid d-flex flex-fill mt-2 mb-1 scroll-x\\\">\\n    <div class=\\\"board-column d-flex flex-fill\\\" *ngFor=\\\"let status of taskAssigneesForTaskboard$ | async\\\">\\n        <div class=\\\"board-column-heading d-flex mb-1\\\">\\n            <strong>{{ status.title }}</strong>\\n            <i class=\\\"icon-plus ml-auto\\\" (click)=\\\"openCreateForm(status)\\\"></i>\\n        </div>\\n        <div class=\\\"flex-fill board-card-wrapper\\\" \\n            ngxDroppable=\\\"status-column\\\" [model]=\\\"status._assignees\\\"\\n            (drop)=\\\"droppedIntoColumn(status, status._assignees)\\\">\\n            <div task-card [id]=\\\"assignee.task\\\"\\n                ngxDraggable [model]=\\\"assignee\\\"\\n                (click)=\\\"selectedTaskId=assignee.task\\\"\\n                *ngFor=\\\"let assignee of status._assignees\\\">\\n            </div>\\n        </div>\\n    </div>\\n</div>    \\n<task-create-form\\n    [opened]=\\\"createFormOpen\\\"\\n    [status]=\\\"createFormStatusId\\\"\\n    (close)=\\\"createFormOpen = false\\\"\\n    (saved)=\\\"selectedTaskId = $event.id\\\"\\n    *ngIf=\\\"createFormOpen\\\">\\n</task-create-form>\\n<task-form\\n    [id]=\\\"selectedTaskId\\\"\\n    (close)=\\\"selectedTaskId = null\\\"\\n    *ngIf=\\\"selectedTaskId\\\">\\n</task-form>\"","import * as _ from 'lodash';\nimport * as actions from '../state/actions';\n\nimport { Store, select } from '@ngrx/store';\nimport { getStatsForTaskboard, getTaskAssigneesForTaskboard } from './../state/selectors/taskboard';\n\nimport { AppState } from '../state/state';\nimport { Component } from '@angular/core';\nimport { ITaskStatus } from '../state/reducers/taskstatus';\nimport { Observable } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n    selector: 'task-board, [task-board]',\n    templateUrl: './task-board.component.html',\n    host: {'class': 'd-flex flex-fill flex-column'}\n})\nexport class TaskboardComponent {\n    createFormOpen = false;\n    createFormStatusId: number;\n    selectedTaskId: number;\n    taskAssigneesForTaskboard$: Observable<any[]>;\n    statsForTaskboard$: Observable<any>;\n\n    constructor(private store: Store<AppState>) {\n        this.taskAssigneesForTaskboard$ = store.pipe(select(getTaskAssigneesForTaskboard), debounceTime(100));\n        this.statsForTaskboard$ = store.pipe(select(getStatsForTaskboard), debounceTime(100));\n    }\n\n    droppedIntoColumn(status: any, assignees: any) {\n        _.each(assignees, (assignee, i) => {\n            if (assignee._task.status != status.id) {\n                const payload = {id: assignee.task, status: status.id};\n                this.store.dispatch({type: actions.TaskActions.PATCH, payload})\n            }\n            const order = i+1;\n            if (assignee.order != order) {\n                const payload = {id: assignee.id, order: order};\n                this.store.dispatch({type: actions.TaskAssigneeActions.PATCH, payload});\n            }\n        });\n    }\n\n    openCreateForm(status: ITaskStatus) {\n        this.createFormStatusId = status.id;\n        this.createFormOpen = true;\n    }\n}\n","module.exports = \"<div class=\\\"board-card d-flex flex-column pointer\\\" *ngIf=\\\"task$ | async as task\\\">\\n    <div class=\\\"d-flex align-items-center\\\">\\n        <span class=\\\"color-indicator\\\" [style.background]=\\\"task._job?.colour\\\"></span>\\n        <span class=\\\"small uppercase\\\"><strong>{{ task._job?._client?.name }} / {{ task._job?.title }}</strong></span>\\n    </div>\\n    <p class=\\\"board-card-desc\\\">{{ task.title }}</p>\\n    <div class=\\\"d-flex\\\">\\n        <div class=\\\"mr-auto\\\">\\n            <span class=\\\"uppercase mr-1\\\" [class.c-red]=\\\"task.is_overdue\\\" *ngIf=\\\"task.target_date\\\"><i class=\\\"icon-bell\\\"></i> {{ task.target_date | date:'d MMM' }}</span>\\n            <span class=\\\"uppercase\\\" [class.c-red]=\\\"+task.time_spent_hours > task._allocated_hours\\\"><i class=\\\"icon-clock\\\"></i> {{ task.time_spent_hours }}/{{ task._allocated_hours }}</span>\\n        </div>\\n        <div>\\n            <div avatar [id]=\\\"assignee.user\\\" class=\\\"avatar avatar-small\\\" *ngFor=\\\"let assignee of task._assignees\\\"></div>\\n        </div>\\n    </div>\\n</div>\\n\"","import * as _ from 'lodash';\n\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\n\nimport { AppState } from '../state/state';\nimport { ITask } from '../state/reducers/task';\nimport { Observable } from 'rxjs';\nimport { getTaskCollectionById } from './../state/selectors/task';\n\n@Component({\n    selector: 'task-card, [task-card]',\n    templateUrl: './task-card.component.html'\n})\nexport class TaskCardComponent implements OnChanges {\n    @Input() id: number;\n\n    task$: Observable<ITask>;\n\n    constructor(private store: Store<AppState>) {}\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (_.has(changes, 'id.currentValue')) {\n            this.task$ = this.store.pipe(select(getTaskCollectionById(this.id)));\n        }\n    }\n}\n","module.exports = \"<div class=\\\"modal {{ opened ? 'in': '' }}\\\" (click)=\\\"closeEvent($event)\\\">\\n    <div class=\\\"modal-panel\\\" #modalPanel>\\n        <div class=\\\"container\\\">\\n            <div class=\\\"row mb-2\\\">\\n                <div class=\\\"col\\\">\\n                    <input type=\\\"text\\\" [formControl]=\\\"form.controls.title\\\" class=\\\"mb-0-5\\\" placeholder=\\\"Title\\\">\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-8\\\">\\n                    <div class=\\\"mb-2\\\">\\n                        <p class=\\\"mb-0-5\\\"><strong>Description</strong></p>\\n                        <textarea autoResize [formControl]=\\\"form.controls.description\\\" class=\\\"mb-0-5\\\" rows=\\\"2\\\"></textarea>\\n                    </div>\\n                    <button class=\\\"button\\\" (click)=\\\"form.save($event)\\\">Save</button>\\n                </div>\\n                <div class=\\\"col-4\\\">\\n                    <p class=\\\"mb-0-5\\\"><strong>Job</strong></p>\\n                    <select class=\\\"full-width input-small\\\" [(ngModel)]=\\\"selectedClientId\\\" (change)=\\\"changeClient($event)\\\">\\n                        <option [value]=\\\"null\\\">Select...</option>\\n                        <option *ngFor=\\\"let option of clients$ | async\\\" [value]=\\\"option.id\\\">{{ option.name }}</option>\\n                    </select>\\n                    <select class=\\\"full-width input-small\\\" [formControl]=\\\"form.controls.job\\\">\\n                        <option [ngValue]=\\\"null\\\">Select...</option>\\n                        <ng-container *ngFor=\\\"let option of jobs$ | async\\\">\\n                            <option *ngIf=\\\"option.client == selectedClientId\\\" [ngValue]=\\\"option.id\\\">{{ option.title }}</option>\\n                        </ng-container>\\n                    </select>\\n                    <hr>\\n\\n                    <p class=\\\"mb-0-5\\\"><strong>Target Date</strong></p>\\n                    <input [formControl]=\\\"form.controls.target_date\\\" type=\\\"date\\\" class=\\\"input-small\\\">\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\"","import * as _ from 'lodash';\n\nimport { ActionsSubject, Store, select } from '@ngrx/store';\nimport { Component, ElementRef, EventEmitter, Input, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { getClientState, getJobState, getUserState } from './../state/state';\n\nimport { AppState } from '../state/state';\nimport { IClient } from '../state/reducers/client';\nimport { IFormActionResult } from '../forms/base.form';\nimport { IJob } from '../state/reducers/job';\nimport { IUser } from '../state/reducers/user';\nimport { Observable } from 'rxjs';\nimport { TaskCreateForm } from '../forms/task-create.form';\n\n@Component({\n    selector: 'task-create-form, [task-create-form]',\n    templateUrl: './task-create-form.component.html'\n})\nexport class TaskCreateFormComponent {\n    @Input() opened = false;\n    @Input() status: number;\n    \n    @Output() close = new EventEmitter();\n    @Output() saved = new EventEmitter();\n\n    @ViewChild('modalPanel') modalPanelRef: ElementRef;\n\n    users$: Observable<IUser[]>;\n    clients$: Observable<IClient[]>;\n    jobs$: Observable<IJob[]>;\n    form: TaskCreateForm;\n    selectedClientId: number = null; \n\n    constructor(\n        private store: Store<AppState>,\n        private actionsSubject: ActionsSubject\n    ) {\n        this.users$ = this.store.pipe(select(getUserState));\n        this.clients$ = this.store.pipe(select(getClientState));\n        this.jobs$ = this.store.pipe(select(getJobState));\n        this.form = new TaskCreateForm(this.store, this.actionsSubject);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (_.has(changes, 'status.currentValue')) {\n            this.form.load({status: this.status});\n            this.form.formSaved.subscribe(\n                (e: IFormActionResult) => {\n                    this.close.emit(e.event);\n                    this.saved.emit(e.payload);\n                }\n            );\n        }\n    }\n\n    closeEvent(event) {\n        if (this.modalPanelRef.nativeElement.contains(event.target)) {\n            // inside modal - do not close\n        } else {\n            this.close.emit(event);\n        }\n    }\n\n    changeClient($event) {\n        this.selectedClientId = $event.target.value;\n        if ($event.target.value == 'null') {\n            this.form.controls.job.setValue(null);\n        }\n    }\n}\n","module.exports = \"<div class=\\\"modal {{ id ? 'in': '' }}\\\" *ngIf=\\\"task$ | async as task\\\" (click)=\\\"closeEvent($event)\\\">\\n    <div class=\\\"modal-panel\\\" #modalPanel>\\n        <div class=\\\"container\\\">\\n            <div class=\\\"row mb-2\\\">\\n                <div class=\\\"col-1 text-right\\\">\\n                    <span class=\\\"color-indicator mt-1\\\" [style.background]=\\\"task._job?.colour\\\"></span>\\n                </div>\\n                <div class=\\\"col-11\\\">\\n                    <div (click)=\\\"titleForm.editable = true\\\">\\n                        <input type=\\\"text\\\" [formControl]=\\\"titleForm.controls.title\\\" class=\\\"mb-0-5\\\">\\n                        <button class=\\\"input-group-addon button\\\" *ngIf=\\\"titleForm.editable\\\" (click)=\\\"titleForm.save($event)\\\">Save</button>\\n                        <button class=\\\"button button-clear\\\" *ngIf=\\\"titleForm.editable\\\" (click)=\\\"titleForm.cancel($event)\\\">Cancel</button>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-8\\\">\\n                    <div class=\\\"mb-2\\\">\\n                        <p class=\\\"mb-0-5\\\"><strong>Description</strong></p>\\n                        <div (click)=\\\"descriptionForm.editable = true\\\">\\n                            <textarea autoResize [formControl]=\\\"descriptionForm.controls.description\\\" class=\\\"transparent mb-0-5\\\" rows=\\\"2\\\"></textarea>\\n                            <button class=\\\"button\\\" *ngIf=\\\"descriptionForm.editable\\\" (click)=\\\"descriptionForm.save($event)\\\">Save</button>\\n                            <button class=\\\"button button-clear\\\" *ngIf=\\\"descriptionForm.editable\\\" (click)=\\\"descriptionForm.cancel($event)\\\">Cancel</button>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"mb-2\\\">\\n                        <p class=\\\"mb-0-5\\\"><strong>Notes</strong></p>\\n                        <textarea autoResize [formControl]=\\\"newNoteForm.controls.note\\\" class=\\\"full-width mb-0-5\\\" placeholder=\\\"Write a note...\\\" rows=\\\"2\\\"></textarea>\\n                        <button class=\\\"button button-secondary\\\" (click)=\\\"newNoteForm.save($event)\\\">Add</button>\\n                    </div>\\n                    \\n                    <ng-container *ngFor=\\\"let note of task._notes\\\">\\n                        <div class=\\\"my-1\\\" *ngIf=\\\"getOrCreateEditNoteForm(note) as form\\\">\\n                            <div class=\\\"d-flex align-items-center mb-1\\\">\\n                                <div avatar [id]=\\\"note.user\\\" class=\\\"avatar mr-1\\\"></div>\\n                                <div>{{ note.updated_at | date:'MMM d, y, h:mm a' }}</div>\\n                            </div>\\n                            <div (click)=\\\"form.editable = true\\\">\\n                                <textarea autoResize [formControl]=\\\"form.controls.note\\\" class=\\\"panel\\\" rows=\\\"1\\\"></textarea>\\n                            </div>\\n                            <div class=\\\"small muted\\\">\\n                                <ng-container *ngIf=\\\"!form.editable\\\">\\n                                    <button class=\\\"button button-clear\\\" (click)=\\\"$event.stopPropagation(); form.editable = true\\\">Edit</button> |\\n                                    <button class=\\\"button button-clear\\\" *ngIf=\\\"!form.editable\\\" (click)=\\\"form.delete($event)\\\">Delete</button>\\n                                </ng-container>\\n                                <ng-container *ngIf=\\\"form.editable\\\">\\n                                    <button class=\\\"button button-secondary\\\" (click)=\\\"form.save($event)\\\">Save</button>\\n                                    <button class=\\\"button button-clear\\\" (click)=\\\"form.cancel($event)\\\">Cancel</button>\\n                                </ng-container>\\n                            </div>\\n                        </div>\\n                    </ng-container>\\n                </div>\\n                <div class=\\\"col-4\\\">\\n                    <div (click)=\\\"jobForm.editable = true\\\">\\n                        <p class=\\\"mb-0-5\\\"><strong>Job</strong></p>\\n                        <select [disabled]=\\\"!jobForm.editable\\\" class=\\\"full-width input-small\\\" [(ngModel)]=\\\"selectedClientId\\\" (change)=\\\"changeClient($event)\\\">\\n                            <option [value]=\\\"null\\\">Select...</option>\\n                            <option *ngFor=\\\"let option of clients$ | async\\\" [value]=\\\"option.id\\\">{{ option.name }}</option>\\n                        </select>\\n                        <select class=\\\"full-width input-small\\\" [formControl]=\\\"jobForm.controls.job\\\">\\n                            <option [ngValue]=\\\"null\\\">Select...</option>\\n                            <ng-container *ngFor=\\\"let option of jobs$ | async\\\">\\n                                <option *ngIf=\\\"option.client == selectedClientId\\\" [ngValue]=\\\"option.id\\\">{{ option.title }}</option>\\n                            </ng-container>\\n                        </select>\\n                        <ng-container *ngIf=\\\"jobForm.editable\\\">\\n                            <button class=\\\"button button-secondary\\\" (click)=\\\"jobForm.save($event)\\\">Save</button>\\n                            <button class=\\\"button button-clear\\\" (click)=\\\"jobForm.cancel($event)\\\">Cancel</button>\\n                        </ng-container>\\n                    </div>\\n                    <hr>\\n                    \\n                    <p class=\\\"mb-0-5\\\"><strong>Assignees</strong></p>\\n                    <div *ngFor=\\\"let assignee of task._assignees\\\" class=\\\"d-inline-block text-center mr-0-5\\\">\\n                        <div avatar [id]=\\\"assignee.user\\\" class=\\\"avatar pointer d-block\\\" (click)=\\\"editAssignee(assignee)\\\"></div>\\n                        <small>{{ assignee.allocated_hours }}</small>\\n                    </div>\\n                    <div class=\\\"d-inline-block text-center mr-0-5\\\">\\n                        <div class=\\\"avatar new pointer d-block\\\" (click)=\\\"editAssignee({task: task.id})\\\">\\n                            <div class=\\\"avatar-text\\\"><i class=\\\"icon-plus\\\"></i></div>\\n                        </div>\\n                        <small>&nbsp;</small>\\n                    </div>\\n                    <div *ngIf=\\\"assigneeEditForm && assigneeEditForm.editable\\\" class=\\\"mt-1\\\">\\n                        <div class=\\\"input-group mb-0-5\\\">\\n                            <select [formControl]=\\\"assigneeEditForm.controls.user\\\" class=\\\"input-small mr-1 flex-fill\\\">\\n                                <option [ngValue]=\\\"null\\\">Select...</option>\\n                                <ng-container *ngFor=\\\"let option of users$ | async\\\">\\n                                    <option [ngValue]=\\\"option.id\\\">{{ option.full_name }}</option>\\n                                </ng-container>\\n                            </select>\\n                            <input type=\\\"number\\\" [formControl]=\\\"assigneeEditForm.controls.allocated_hours\\\" class=\\\"input-small\\\" style=\\\"flex: 0 1 7rem;\\\">\\n                        </div>\\n                        <div class=\\\"d-flex\\\">\\n                            <button class=\\\"button button-secondary\\\" (click)=\\\"assigneeEditForm.save($event)\\\">Save</button>\\n                            <button class=\\\"button button-clear\\\" (click)=\\\"assigneeEditForm.cancel($event)\\\">Cancel</button>\\n                            <button class=\\\"button button-clear ml-auto\\\" *ngIf=\\\"assigneeEditForm.value.id\\\" (click)=\\\"assigneeEditForm.delete($event)\\\">Delete</button>\\n                        </div>\\n                    </div>\\n                    <hr>\\n\\n                    <p class=\\\"mb-0-5\\\"><strong>Time Spent (hrs)</strong></p>\\n                    <p>{{ task.time_spent_hours }} of {{ task._allocated_hours }}</p>\\n                    <hr>\\n                    <p class=\\\"mb-0-5\\\"><strong>Target Date</strong></p>\\n                    <div (click)=\\\"targetDateForm.editable = true\\\">\\n                        <input [formControl]=\\\"targetDateForm.controls.target_date\\\" type=\\\"date\\\" class=\\\"input-small\\\">\\n                        <button class=\\\"button\\\" *ngIf=\\\"targetDateForm.editable\\\" (click)=\\\"targetDateForm.save($event)\\\">Save</button>\\n                        <button class=\\\"button button-clear\\\" *ngIf=\\\"targetDateForm.editable\\\" (click)=\\\"targetDateForm.cancel($event)\\\">Cancel</button>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\"","import * as _ from 'lodash';\nimport * as actions from '../state/actions';\n\nimport { ActionsSubject, Store, select } from '@ngrx/store';\nimport { Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { getClientState, getJobState, getUserState } from './../state/state';\n\nimport { AppState } from '../state/state';\nimport { FormCleanAfterMethod } from '../forms/base.form';\nimport { IClient } from '../state/reducers/client';\nimport { IJob } from '../state/reducers/job';\nimport { ITask } from '../state/reducers/task';\nimport { ITaskAssignee } from '../state/reducers/taskassignee';\nimport { ITaskNote } from '../state/reducers/tasknote';\nimport { IUser } from '../state/reducers/user';\nimport { Observable } from 'rxjs';\nimport { TaskAssigneeForm } from '../forms/task-assignee.form';\nimport { TaskDescriptionForm } from '../forms/task-description.form';\nimport { TaskJobForm } from '../forms/task-job.form';\nimport { TaskNoteForm } from '../forms/task-note.form';\nimport { TaskTargetDateForm } from '../forms/task-target-date.form';\nimport { TaskTitleForm } from '../forms/task-title.form';\nimport { getTaskCollectionById } from './../state/selectors/task';\nimport { take } from 'rxjs/operators';\n\n@Component({\n    selector: 'task-form, [task-form]',\n    templateUrl: './task-form.component.html'\n})\nexport class TaskFormComponent implements OnChanges {\n    @Input() id: number;\n\n    @Output() close = new EventEmitter();\n\n    @ViewChild('modalPanel') modalPanelRef: ElementRef;\n\n    users$: Observable<IUser[]>;\n    clients$: Observable<IClient[]>;\n    jobs$: Observable<IJob[]>;\n    task$: Observable<ITask>;\n    taskNoteForms = {};\n    descriptionForm: TaskDescriptionForm;\n    jobForm: TaskJobForm;\n    titleForm: TaskTitleForm;\n    targetDateForm: TaskTargetDateForm;\n    newNoteForm: TaskNoteForm;\n    assigneeEditForm: TaskAssigneeForm;\n    selectedClientId: number = null; \n\n    constructor(\n        private store: Store<AppState>,\n        private actionsSubject: ActionsSubject\n    ) {\n        this.users$ = this.store.pipe(select(getUserState));\n        this.clients$ = this.store.pipe(select(getClientState));\n        this.jobs$ = this.store.pipe(select(getJobState));\n        this.descriptionForm = new TaskDescriptionForm(this.store, this.actionsSubject);\n        this.jobForm = new TaskJobForm(this.store, this.actionsSubject);\n        this.titleForm = new TaskTitleForm(this.store, this.actionsSubject);\n        this.targetDateForm = new TaskTargetDateForm(this.store, this.actionsSubject);\n        this.newNoteForm = new TaskNoteForm(this.store, this.actionsSubject);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (_.has(changes, 'id.currentValue')) {\n            this.task$ = this.store.pipe(select(getTaskCollectionById(this.id)));\n            this.task$.pipe(take(1)).subscribe(\n                d => {\n                    this.selectedClientId = d._job.client;\n                    this.descriptionForm.load(d);\n                    this.jobForm.load(d);\n                    this.titleForm.load(d);\n                    this.targetDateForm.load(d);\n                    this.newNoteForm.load({task: d.id});\n                }\n            );\n        }\n    }\n\n    closeEvent(event) {\n        if (this.modalPanelRef.nativeElement.contains(event.target)) {\n            // inside modal - do not close\n        } else {\n            this.close.emit(event);\n        }\n    }\n\n    getOrCreateEditNoteForm(note: ITaskNote) {\n        if (!_.has(this.taskNoteForms, note.id)) {\n            const form = new TaskNoteForm(\n                this.store,\n                this.actionsSubject,\n                {alwaysEditable: false, cleanAfterMethod: FormCleanAfterMethod.loadSaved}\n            );\n            form.load(note);\n            this.taskNoteForms[note.id] = form;\n            return this.taskNoteForms[note.id];\n        }\n        return this.taskNoteForms[note.id];\n    }\n\n    changeClient($event) {\n        this.selectedClientId = $event.target.value;\n        if ($event.target.value == 'null') {\n            this.jobForm.controls.job.setValue(null);\n        }\n    }\n\n    editAssignee(assignee: ITaskAssignee) {\n        this.assigneeEditForm = new TaskAssigneeForm(\n            this.store,\n            this.actionsSubject\n        );\n        this.assigneeEditForm.editable = true;\n        this.assigneeEditForm.load(assignee);\n    }\n}\n","import { AfterViewInit, Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n@Directive({\n    selector: 'textarea[autoResize]'\n})\nexport class AutoResizeDirective implements AfterViewInit {\n\n    constructor(private element: ElementRef) { }\n\n    @Input('autoResize') maxHeight: number;\n\n    @HostListener('input', ['$event.target'])\n    onInput(textArea: HTMLTextAreaElement): void {\n        this.adjust();\n    }\n\n    ngAfterViewInit() {\n        this.adjust();\n    }\n\n    adjust(): void {\n        const ta = this.element.nativeElement;\n        let newHeight;\n        if (ta) {\n            ta.style.overflow = 'hidden';\n            ta.style.height = 'auto';\n            if (this.maxHeight) {\n                newHeight = Math.min(ta.scrollHeight, this.maxHeight);\n            } else {\n                newHeight = ta.scrollHeight;\n            }\n            ta.style.height = newHeight + 'px';\n        }\n    }\n\n}\n","import * as _ from 'lodash';\n\nimport { AbstractControl, AsyncValidatorFn, FormGroup, ValidatorFn } from '@angular/forms';\nimport { ActionsSubject, Store } from '@ngrx/store';\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { AppState } from './../state/state';\nimport { IActionWithPayload } from './../state/models';\nimport { OnDestroy } from '@angular/core';\n\nexport enum FormCleanAfterMethod {\n    empty = 0,\n    resetToInitial = 1,\n    loadSaved = 2\n}\n\nexport interface IFormOptions {\n    alwaysEditable?: boolean;\n    cleanAfterMethod?: FormCleanAfterMethod;\n}\n\nexport interface IFormActionResult {\n    event: Event,\n    payload: any\n};\n\nconst defaultFormOptions: IFormOptions = {\n    alwaysEditable: false,\n    cleanAfterMethod: FormCleanAfterMethod.loadSaved\n};\n\nexport class BaseForm extends FormGroup implements OnDestroy {\n\n    options: IFormOptions;\n    initialData: any;\n    controls: {};\n    createAction: string\n    createSuccessAction: string\n    updateAction: string\n    updateSuccessAction: string\n    deleteAction: string\n    deleteSuccessAction: string\n\n    private _editable = false;\n    private _formDeletedSubject = new Subject<IFormActionResult>();\n    private _formSavedSubject = new Subject<IFormActionResult>();\n\n    protected _subscriptions: Subscription[] = [];\n\n    constructor(\n        protected store: Store<AppState>,\n        protected actionsSubject: ActionsSubject,\n        controls: { [key: string]: AbstractControl; },\n        validator?: ValidatorFn,\n        asyncValidator?: AsyncValidatorFn,\n        formOptions?: IFormOptions,\n    ) {\n        super(controls, validator, asyncValidator);\n        // set the options\n        this.options = _.assign({}, defaultFormOptions, formOptions);\n        // setup the form\n        this.editable = this.options.alwaysEditable;\n    }\n    \n    ngOnDestroy() {\n        _.each(this._subscriptions, s => s.unsubscribe());\n    }\n\n    get formSaved(): Observable<any> {\n        return this._formSavedSubject.asObservable();\n    }\n\n    get formDeleted(): Observable<any> {\n        return this._formDeletedSubject.asObservable();\n    }\n    \n    get editable(): boolean {\n        return this._editable;\n    }\n\n    set editable(value: boolean) {\n        this._editable = value;\n        this.setControlState();\n    }\n\n    load(data: any) {\n        // set the initial data incase we need to reset it\n        this.initialData = data;\n        // patch the form as no all fields will be defined\n        this.patchValue(data);\n    }\n\n    save(event: Event) {\n        // save the form data\n        event.stopPropagation();\n        \n        if (!this.valid) {\n            return;\n        }\n        \n        if (this.createAction && !this.value.id) {\n            // create a new record as we have no id\n            this.store.dispatch({ type: this.createAction, payload: this.value });\n        } else if (this.updateAction && this.value.id) {\n            // update or patch the record\n            this.store.dispatch({ type: this.updateAction, payload: this.value });\n        } else {\n            return;\n        }\n        \n        // wait for the result\n        this.waitForResult(event);\n    }\n\n    cancel(event: Event) {\n        event.stopPropagation();\n\n        this.reset(this.initialData);\n        \n        if (!this.options.alwaysEditable) {\n            this.editable = false;\n        }\n    }\n\n    delete(event: Event) {\n        // delete the instance in the form\n        event.stopPropagation();\n        \n        if (!this.deleteAction || !this.value.id) {\n            return;\n        }\n\n        // delete the record\n        this.store.dispatch({ type: this.deleteAction, payload: this.value });\n        \n        // wait for the result\n        this.waitForResult(event);\n    }\n\n    resetAndClose(payload) {\n        if (this.options.cleanAfterMethod == FormCleanAfterMethod.empty) {\n            this.initialData = {};\n        } else if (this.options.cleanAfterMethod == FormCleanAfterMethod.loadSaved) {\n            this.initialData = payload;\n        } else if (this.options.cleanAfterMethod == FormCleanAfterMethod.resetToInitial) {\n            // do nothing\n        }\n        \n        this.reset(this.initialData);\n        \n        if (!this.options.alwaysEditable) {\n            this.editable = false;\n        }\n    }\n\n    setControlState() {\n        // enable or disable all controls\n        if (this.editable) {\n            this.enable();\n        } else {\n            this.disable();\n        }\n    }\n\n    waitForResult(event) {\n        // all store actions pass through the actionsSubject\n        // watch for our save or delete success actions and reset/close the form\n        return this.actionsSubject.pipe(\n            filter(\n                (action: IActionWithPayload) =>\n                _.includes([this.createSuccessAction, this.updateSuccessAction, this.deleteSuccessAction], action.type)\n            ),\n            filter(\n                action => this.value.id === null || this.value.id === action.payload.id\n            ),\n            take(1)\n        ).subscribe(\n            action => {\n                if (this.deleteSuccessAction === action.type) {\n                    // after delete totally reset the form\n                    // this may need to be taylored later in options but ok for now\n                    this.initialData = {};\n                    this.reset(this.initialData);\n                    this.editable = false;\n                    // and push the data to the observable\n                    this._formDeletedSubject.next({event: event, payload: action.payload});\n                } else {\n                    // reset the form\n                    this.resetAndClose(action.payload);\n                    // and push the data to the observable\n                    this._formSavedSubject.next({event: event, payload: action.payload});\n                }\n            }\n        );\n    }\n\n}\n","import * as _ from 'lodash';\nimport * as actions from '../state/actions';\n\nimport { ActionsSubject, Store } from '@ngrx/store';\nimport { BaseForm, FormCleanAfterMethod, IFormOptions } from './base.form';\nimport { FormControl, Validators } from '@angular/forms';\nimport { filter, take } from 'rxjs/operators';\n\nimport { AppState } from '../state/state';\nimport { IActionWithPayload } from './../state/models';\n\nconst options: IFormOptions = {\n    alwaysEditable: false,\n    cleanAfterMethod: FormCleanAfterMethod.loadSaved\n}\n\nexport class TaskAssigneeForm extends BaseForm {\n\n    controls: {\n        id: FormControl\n        task: FormControl\n        user: FormControl\n        allocated_hours: FormControl\n    };\n    createAction = actions.TaskAssigneeActions.ADD;\n    createSuccessAction = actions.TaskAssigneeActions.ADD_SUCCESS;\n    updateAction = actions.TaskAssigneeActions.UPDATE;\n    updateSuccessAction = actions.TaskAssigneeActions.UPDATE_SUCCESS;\n    deleteAction = actions.TaskAssigneeActions.REMOVE;\n    deleteSuccessAction = actions.TaskAssigneeActions.REMOVE_SUCCESS;\n\n    constructor(\n        protected store: Store<AppState>,\n        protected actionsSubject: ActionsSubject,\n        formOptions?: IFormOptions\n    ) {\n        super(\n            store,\n            actionsSubject,\n            {\n                id: new FormControl(null),\n                task: new FormControl(null, Validators.required),\n                user: new FormControl(null, Validators.required),\n                allocated_hours: new FormControl(null, Validators.required)\n            },\n            null,\n            null,\n            _.assign({}, options, formOptions)\n        );\n    }\n}\n","import * as _ from 'lodash';\nimport * as actions from '../state/actions';\n\nimport { ActionsSubject, Store } from '@ngrx/store';\nimport { BaseForm, FormCleanAfterMethod, IFormOptions } from './base.form';\nimport { FormControl, Validators } from '@angular/forms';\n\nimport { AppState } from '../state/state';\n\nconst options: IFormOptions = {\n    alwaysEditable: true,\n    cleanAfterMethod: FormCleanAfterMethod.resetToInitial\n}\n\nexport class TaskCreateForm extends BaseForm {\n\n    controls: {\n        id: FormControl\n        title: FormControl\n        description: FormControl\n        job: FormControl\n        target_date: FormControl\n        status: FormControl\n    };\n    createAction = actions.TaskActions.ADD;\n    createSuccessAction = actions.TaskActions.ADD_SUCCESS;\n\n    constructor(\n        protected store: Store<AppState>,\n        protected actionsSubject: ActionsSubject,\n        formOptions?: IFormOptions\n    ) {\n        super(\n            store,\n            actionsSubject,\n            {\n                id: new FormControl(null),\n                title: new FormControl('', Validators.required),\n                description: new FormControl(''),\n                job: new FormControl(null, Validators.required),\n                target_date: new FormControl(null),\n                status: new FormControl(null, Validators.required)\n            },\n            null,\n            null,\n            _.assign({}, options, formOptions)\n        );\n    }\n}\n","import * as _ from 'lodash';\nimport * as actions from '../state/actions';\n\nimport { ActionsSubject, Store } from '@ngrx/store';\nimport { BaseForm, FormCleanAfterMethod, IFormOptions } from './base.form';\nimport { FormControl, Validators } from '@angular/forms';\nimport { filter, take } from 'rxjs/operators';\n\nimport { AppState } from '../state/state';\nimport { IActionWithPayload } from './../state/models';\n\nconst options: IFormOptions = {\n    alwaysEditable: false,\n    cleanAfterMethod: FormCleanAfterMethod.loadSaved\n}\n\nexport class TaskDescriptionForm extends BaseForm {\n\n    controls: {\n        id: FormControl\n        description: FormControl\n    };\n    createAction = actions.TaskActions.ADD;\n    createSuccessAction = actions.TaskActions.ADD_SUCCESS;\n    updateAction = actions.TaskActions.PATCH;\n    updateSuccessAction = actions.TaskActions.PATCH_SUCCESS;\n\n    constructor(\n        protected store: Store<AppState>,\n        protected actionsSubject: ActionsSubject,\n        formOptions?: IFormOptions\n    ) {\n        super(\n            store,\n            actionsSubject,\n            {\n                id: new FormControl(null),\n                description: new FormControl('')\n            },\n            null,\n            null,\n            _.assign({}, options, formOptions)\n        );\n    }\n}\n","import * as _ from 'lodash';\nimport * as actions from '../state/actions';\n\nimport { ActionsSubject, Store } from '@ngrx/store';\nimport { BaseForm, FormCleanAfterMethod, IFormOptions } from './base.form';\nimport { FormControl, Validators } from '@angular/forms';\nimport { filter, take } from 'rxjs/operators';\n\nimport { AppState } from '../state/state';\nimport { IActionWithPayload } from './../state/models';\n\nconst options: IFormOptions = {\n    alwaysEditable: false,\n    cleanAfterMethod: FormCleanAfterMethod.loadSaved\n}\n\nexport class TaskJobForm extends BaseForm {\n\n    controls: {\n        id: FormControl\n        job: FormControl\n    };\n    createAction = actions.TaskActions.ADD;\n    createSuccessAction = actions.TaskActions.ADD_SUCCESS;\n    updateAction = actions.TaskActions.PATCH;\n    updateSuccessAction = actions.TaskActions.PATCH_SUCCESS;\n\n    constructor(\n        protected store: Store<AppState>,\n        protected actionsSubject: ActionsSubject,\n        formOptions?: IFormOptions\n    ) {\n        super(\n            store,\n            actionsSubject,\n            {\n                id: new FormControl(null),\n                job: new FormControl(null, Validators.required)\n            },\n            null,\n            null,\n            _.assign({}, options, formOptions)\n        );\n    }\n}\n","import * as _ from 'lodash';\nimport * as actions from '../state/actions';\n\nimport { ActionsSubject, Store } from '@ngrx/store';\nimport { BaseForm, FormCleanAfterMethod, IFormOptions } from './base.form';\nimport { FormControl, Validators } from '@angular/forms';\nimport { filter, take } from 'rxjs/operators';\n\nimport { AppState } from '../state/state';\nimport { IActionWithPayload } from './../state/models';\n\nconst options: IFormOptions = {\n    alwaysEditable: true,\n    cleanAfterMethod: FormCleanAfterMethod.resetToInitial\n}\n\nexport class TaskNoteForm extends BaseForm {\n\n    controls: {\n        id: FormControl\n        task: FormControl\n        note: FormControl\n    };\n    createAction = actions.TaskNoteActions.ADD;\n    createSuccessAction = actions.TaskNoteActions.ADD_SUCCESS;\n    updateAction = actions.TaskNoteActions.UPDATE;\n    updateSuccessAction = actions.TaskNoteActions.UPDATE_SUCCESS;\n    deleteAction = actions.TaskNoteActions.REMOVE;\n    deleteSuccessAction = actions.TaskNoteActions.REMOVE_SUCCESS;\n\n    constructor(\n        protected store: Store<AppState>,\n        protected actionsSubject: ActionsSubject,\n        formOptions?: IFormOptions\n    ) {\n        super(\n            store,\n            actionsSubject,\n            {\n                id: new FormControl(null),\n                task: new FormControl(null, Validators.required),\n                note: new FormControl('', Validators.required)\n            },\n            null,\n            null,\n            _.assign({}, options, formOptions)\n        );\n    }\n}\n","import * as _ from 'lodash';\nimport * as actions from '../state/actions';\n\nimport { ActionsSubject, Store } from '@ngrx/store';\nimport { BaseForm, FormCleanAfterMethod, IFormOptions } from './base.form';\nimport { FormControl, Validators } from '@angular/forms';\nimport { filter, take } from 'rxjs/operators';\n\nimport { AppState } from '../state/state';\nimport { IActionWithPayload } from './../state/models';\n\nconst options: IFormOptions = {\n    alwaysEditable: false,\n    cleanAfterMethod: FormCleanAfterMethod.loadSaved\n}\n\nexport class TaskTargetDateForm extends BaseForm {\n\n    controls: {\n        id: FormControl\n        target_date: FormControl\n    };\n    createAction = actions.TaskActions.ADD;\n    createSuccessAction = actions.TaskActions.ADD_SUCCESS;\n    updateAction = actions.TaskActions.PATCH;\n    updateSuccessAction = actions.TaskActions.PATCH_SUCCESS;\n\n    constructor(\n        protected store: Store<AppState>,\n        protected actionsSubject: ActionsSubject,\n        formOptions?: IFormOptions\n    ) {\n        super(\n            store,\n            actionsSubject,\n            {\n                id: new FormControl(null),\n                target_date: new FormControl(null)\n            },\n            null,\n            null,\n            _.assign({}, options, formOptions)\n        );\n\n        // when the date field is emptied set it to null as an empty\n        // string is an invalid date format in drf.\n        const sub = this.controls.target_date.valueChanges.subscribe(value => {\n            if (value === '') {\n                this.controls.target_date.setValue(null);\n            }\n        });\n        this._subscriptions.push(sub);\n    }\n}\n","import * as _ from 'lodash';\nimport * as actions from '../state/actions';\n\nimport { ActionsSubject, Store } from '@ngrx/store';\nimport { BaseForm, FormCleanAfterMethod, IFormOptions } from './base.form';\nimport { FormControl, Validators } from '@angular/forms';\nimport { filter, take } from 'rxjs/operators';\n\nimport { AppState } from '../state/state';\nimport { IActionWithPayload } from './../state/models';\n\nconst options: IFormOptions = {\n    alwaysEditable: false,\n    cleanAfterMethod: FormCleanAfterMethod.loadSaved\n}\n\nexport class TaskTitleForm extends BaseForm {\n\n    controls: {\n        id: FormControl\n        title: FormControl\n    };\n    createAction = actions.TaskActions.ADD;\n    createSuccessAction = actions.TaskActions.ADD_SUCCESS;\n    updateAction = actions.TaskActions.PATCH;\n    updateSuccessAction = actions.TaskActions.PATCH_SUCCESS;\n\n    constructor(\n        protected store: Store<AppState>,\n        protected actionsSubject: ActionsSubject,\n        formOptions?: IFormOptions\n    ) {\n        super(\n            store,\n            actionsSubject,\n            {\n                id: new FormControl(null),\n                title: new FormControl('', Validators.required)\n            },\n            null,\n            null,\n            _.assign({}, options, formOptions)\n        );\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class APIService {\n\n    constructor(private http: HttpClient) { }\n\n    private get headers() {\n        return new HttpHeaders({'Content-Type': 'application/json'});\n    }\n\n    all(url: string): Observable<any> {\n        return this.http.get(`${url}`, { headers: this.headers });\n    }\n\n    one(url: string, id: number): Observable<any> {\n        return this.http.get(`${url}${id}/`, { headers: this.headers });\n    }\n\n    create(url: string, object: any): Observable<any> {\n        return this.http.post(`${url}`, object, { headers: this.headers });\n\n    }\n\n    update(url: string, object: any): Observable<any> {\n        return this.http.put(`${url}${object.id}/`, object, { headers: this.headers });\n    }\n\n    patch(url: string, object: any): Observable<any> {\n        return this.http.patch(`${url}${object.id}/`, object, { headers: this.headers });\n    }\n\n    remove(url: string, object: any): Observable<any> {\n        // Here we are returning the object back as a delete response has no content\n        return this.http.delete(`${url}${object.id}/`, { headers: this.headers })\n        .pipe(map(() => object));\n    }\n\n    options(url: string): Observable<any> {\n        return this.http.options(`${url}`, { headers: this.headers });\n    }\n\n    post(url: string, object: any): Observable<any> {\n        return this.http.post(`${url}`, object, { headers: this.headers });\n    }\n\n}\n","import { Action } from '@ngrx/store';\nimport { IActionWithPayload } from '../models';\nimport { IClient } from '../reducers/client';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ClientActions {\n\n    static LOAD_ALL = '[Client] LOAD_ALL';\n    static LOAD_ALL_SUCCESS = '[Client] LOAD_ALL_SUCCESS';\n    static LOAD_ONE = '[Client] LOAD_ONE';\n    static LOAD_ONE_SUCCESS = '[Client] LOAD_ONE_SUCCESS';\n    static ADD = '[Client] ADD';\n    static ADD_SUCCESS = '[Client] ADD_SUCCESS';\n    static UPDATE = '[Client] UPDATE';\n    static UPDATE_SUCCESS = '[Client] UPDATE_SUCCESS';\n    static REMOVE = '[Client] REMOVE';\n    static REMOVE_SUCCESS = '[Client] REMOVE_SUCCESS';\n\n    LoadAll(): Action {\n        return { type: ClientActions.LOAD_ALL };\n    }\n\n    LoadAllSuccess(payload: IClient[]): IActionWithPayload {\n        return { type: ClientActions.LOAD_ALL_SUCCESS, payload };\n    }\n\n    LoadOne(payload: number): IActionWithPayload {\n        return { type: ClientActions.LOAD_ONE, payload };\n    }\n\n    LoadOneSuccess(payload: IClient): IActionWithPayload {\n        return { type: ClientActions.LOAD_ONE_SUCCESS, payload };\n    }\n\n    Add(payload: IClient): IActionWithPayload {\n        return { type: ClientActions.ADD, payload };\n    }\n\n    AddSuccess(payload: IClient): IActionWithPayload {\n        return { type: ClientActions.ADD_SUCCESS, payload };\n    }\n\n    Update(payload: IClient): IActionWithPayload {\n        return { type: ClientActions.UPDATE, payload };\n    }\n\n    UpdateSuccess(payload: IClient): IActionWithPayload {\n        return { type: ClientActions.UPDATE_SUCCESS, payload };\n    }\n\n    Remove(payload: IClient): IActionWithPayload {\n        return { type: ClientActions.REMOVE, payload };\n    }\n\n    RemoveSuccess(payload: IClient): IActionWithPayload {\n        return { type: ClientActions.REMOVE_SUCCESS, payload };\n    }\n}\n","import { IActionWithPayload } from '../models';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DataActions {\n\n    static LOAD_DATA = '[Data] LOAD_DATA';\n\n    LoadData(payload: boolean): IActionWithPayload {\n        return { type: DataActions.LOAD_DATA, payload };\n    }\n\n}\n","import { IActionWithPayload } from '../models';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FilterActions {\n\n    static CLIENT = '[Filter] CLIENT';\n    static JOB = '[Filter] JOB';\n    static OVERDUE = '[Filter] OVERDUE';\n    static USER = '[Filter] USER';\n\n    Client(payload: number): IActionWithPayload {\n        return { type: FilterActions.CLIENT, payload };\n    }\n\n    Job(payload: number): IActionWithPayload {\n        return { type: FilterActions.JOB, payload };\n    }\n\n    Overdue(payload: number): IActionWithPayload {\n        return { type: FilterActions.OVERDUE, payload };\n    }\n\n    User(payload: number): IActionWithPayload {\n        return { type: FilterActions.USER, payload };\n    }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { IActionWithPayload } from '../models';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class HttpActions {\n\n    static HTTP_ERROR = '[Http] HTTP_ERROR';\n\n    HttpError(payload: HttpErrorResponse): IActionWithPayload {\n        return { type: HttpActions.HTTP_ERROR, payload };\n    }\n\n}\n","import { ClientActions } from './client';\nimport { DataActions } from './data';\nimport { FilterActions } from './filters';\nimport { HttpActions } from './http';\nimport { JobActions } from './job';\nimport { MeActions } from './me';\nimport { TaskActions } from './task';\nimport { TaskAssigneeActions } from './taskassignee';\nimport { TaskNoteActions } from './tasknote';\nimport { TaskStatusActions } from './taskstatus';\nimport { UserActions } from './user';\n\nexport {\n    ClientActions,\n    DataActions,\n    FilterActions,\n    HttpActions,\n    JobActions,\n    MeActions,\n    TaskActions,\n    TaskAssigneeActions,\n    TaskNoteActions,\n    TaskStatusActions,\n    UserActions\n};\n\nexport const actions = [\n    ClientActions,\n    DataActions,\n    FilterActions,\n    HttpActions,\n    JobActions,\n    MeActions,\n    TaskActions,\n    TaskAssigneeActions,\n    TaskNoteActions,\n    TaskStatusActions,\n    UserActions\n];\n","import { Action } from '@ngrx/store';\nimport { IActionWithPayload } from '../models';\nimport { IJob } from '../reducers/job';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class JobActions {\n\n    static LOAD_ALL = '[Job] LOAD_ALL';\n    static LOAD_ALL_SUCCESS = '[Job] LOAD_ALL_SUCCESS';\n    static LOAD_ONE = '[Job] LOAD_ONE';\n    static LOAD_ONE_SUCCESS = '[Job] LOAD_ONE_SUCCESS';\n    static ADD = '[Job] ADD';\n    static ADD_SUCCESS = '[Job] ADD_SUCCESS';\n    static UPDATE = '[Job] UPDATE';\n    static UPDATE_SUCCESS = '[Job] UPDATE_SUCCESS';\n    static REMOVE = '[Job] REMOVE';\n    static REMOVE_SUCCESS = '[Job] REMOVE_SUCCESS';\n\n    LoadAll(): Action {\n        return { type: JobActions.LOAD_ALL };\n    }\n\n    LoadAllSuccess(payload: IJob[]): IActionWithPayload {\n        return { type: JobActions.LOAD_ALL_SUCCESS, payload };\n    }\n\n    LoadOne(payload: number): IActionWithPayload {\n        return { type: JobActions.LOAD_ONE, payload };\n    }\n\n    LoadOneSuccess(payload: IJob): IActionWithPayload {\n        return { type: JobActions.LOAD_ONE_SUCCESS, payload };\n    }\n\n    Add(payload: IJob): IActionWithPayload {\n        return { type: JobActions.ADD, payload };\n    }\n\n    AddSuccess(payload: IJob): IActionWithPayload {\n        return { type: JobActions.ADD_SUCCESS, payload };\n    }\n\n    Update(payload: IJob): IActionWithPayload {\n        return { type: JobActions.UPDATE, payload };\n    }\n\n    UpdateSuccess(payload: IJob): IActionWithPayload {\n        return { type: JobActions.UPDATE_SUCCESS, payload };\n    }\n\n    Remove(payload: IJob): IActionWithPayload {\n        return { type: JobActions.REMOVE, payload };\n    }\n\n    RemoveSuccess(payload: IJob): IActionWithPayload {\n        return { type: JobActions.REMOVE_SUCCESS, payload };\n    }\n}\n","import { Action } from '@ngrx/store';\nimport { IActionWithPayload } from '../models';\nimport { IMe } from '../reducers/me';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class MeActions {\n\n    static LOAD = '[Me] LOAD';\n    static LOAD_SUCCESS = '[Me] LOAD_SUCCESS';\n\n    Load(): Action {\n        return { type: MeActions.LOAD };\n    }\n\n    LoadSuccess(payload: IMe): IActionWithPayload {\n        return { type: MeActions.LOAD_SUCCESS, payload };\n    }\n}\n","import { Action } from '@ngrx/store';\nimport { IActionWithPayload } from '../models';\nimport { ITask } from '../reducers/task';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskActions {\n\n    static LOAD_ALL = '[Task] LOAD_ALL';\n    static LOAD_ALL_SUCCESS = '[Task] LOAD_ALL_SUCCESS';\n    static LOAD_ONE = '[Task] LOAD_ONE';\n    static LOAD_ONE_SUCCESS = '[Task] LOAD_ONE_SUCCESS';\n    static ADD = '[Task] ADD';\n    static ADD_SUCCESS = '[Task] ADD_SUCCESS';\n    static UPDATE = '[Task] UPDATE';\n    static UPDATE_SUCCESS = '[Task] UPDATE_SUCCESS';\n    static PATCH = '[Task] PATCH';\n    static PATCH_SUCCESS = '[Task] PATCH_SUCCESS';\n    static REMOVE = '[Task] REMOVE';\n    static REMOVE_SUCCESS = '[Task] REMOVE_SUCCESS';\n\n    LoadAll(): Action {\n        return { type: TaskActions.LOAD_ALL };\n    }\n\n    LoadAllSuccess(payload: ITask[]): IActionWithPayload {\n        return { type: TaskActions.LOAD_ALL_SUCCESS, payload };\n    }\n\n    LoadOne(payload: number): IActionWithPayload {\n        return { type: TaskActions.LOAD_ONE, payload };\n    }\n\n    LoadOneSuccess(payload: ITask): IActionWithPayload {\n        return { type: TaskActions.LOAD_ONE_SUCCESS, payload };\n    }\n\n    Add(payload: ITask): IActionWithPayload {\n        return { type: TaskActions.ADD, payload };\n    }\n\n    AddSuccess(payload: ITask): IActionWithPayload {\n        return { type: TaskActions.ADD_SUCCESS, payload };\n    }\n\n    Update(payload: ITask): IActionWithPayload {\n        return { type: TaskActions.UPDATE, payload };\n    }\n\n    UpdateSuccess(payload: ITask): IActionWithPayload {\n        return { type: TaskActions.UPDATE_SUCCESS, payload };\n    }\n\n    Patch(payload: ITask): IActionWithPayload {\n        return { type: TaskActions.PATCH, payload };\n    }\n\n    PatchSuccess(payload: ITask): IActionWithPayload {\n        return { type: TaskActions.PATCH_SUCCESS, payload };\n    }\n\n    Remove(payload: ITask): IActionWithPayload {\n        return { type: TaskActions.REMOVE, payload };\n    }\n\n    RemoveSuccess(payload: ITask): IActionWithPayload {\n        return { type: TaskActions.REMOVE_SUCCESS, payload };\n    }\n}\n","import { Action } from '@ngrx/store';\nimport { IActionWithPayload } from '../models';\nimport { ITaskAssignee } from '../reducers/taskassignee';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskAssigneeActions {\n\n    static LOAD_ALL = '[TaskAssignee] LOAD_ALL';\n    static LOAD_ALL_SUCCESS = '[TaskAssignee] LOAD_ALL_SUCCESS';\n    static LOAD_ONE = '[TaskAssignee] LOAD_ONE';\n    static LOAD_ONE_SUCCESS = '[TaskAssignee] LOAD_ONE_SUCCESS';\n    static ADD = '[TaskAssignee] ADD';\n    static ADD_SUCCESS = '[TaskAssignee] ADD_SUCCESS';\n    static UPDATE = '[TaskAssignee] UPDATE';\n    static UPDATE_SUCCESS = '[TaskAssignee] UPDATE_SUCCESS';\n    static PATCH = '[TaskAssignee] PATCH';\n    static PATCH_SUCCESS = '[TaskAssignee] PATCH_SUCCESS';\n    static REMOVE = '[TaskAssignee] REMOVE';\n    static REMOVE_SUCCESS = '[TaskAssignee] REMOVE_SUCCESS';\n\n    LoadAll(): Action {\n        return { type: TaskAssigneeActions.LOAD_ALL };\n    }\n\n    LoadAllSuccess(payload: ITaskAssignee[]): IActionWithPayload {\n        return { type: TaskAssigneeActions.LOAD_ALL_SUCCESS, payload };\n    }\n\n    LoadOne(payload: number): IActionWithPayload {\n        return { type: TaskAssigneeActions.LOAD_ONE, payload };\n    }\n\n    LoadOneSuccess(payload: ITaskAssignee): IActionWithPayload {\n        return { type: TaskAssigneeActions.LOAD_ONE_SUCCESS, payload };\n    }\n\n    Add(payload: ITaskAssignee): IActionWithPayload {\n        return { type: TaskAssigneeActions.ADD, payload };\n    }\n\n    AddSuccess(payload: ITaskAssignee): IActionWithPayload {\n        return { type: TaskAssigneeActions.ADD_SUCCESS, payload };\n    }\n\n    Update(payload: ITaskAssignee): IActionWithPayload {\n        return { type: TaskAssigneeActions.UPDATE, payload };\n    }\n\n    UpdateSuccess(payload: ITaskAssignee): IActionWithPayload {\n        return { type: TaskAssigneeActions.UPDATE_SUCCESS, payload };\n    }\n\n    Patch(payload: ITaskAssignee): IActionWithPayload {\n        return { type: TaskAssigneeActions.PATCH, payload };\n    }\n\n    PatchSuccess(payload: ITaskAssignee): IActionWithPayload {\n        return { type: TaskAssigneeActions.PATCH_SUCCESS, payload };\n    }\n\n    Remove(payload: ITaskAssignee): IActionWithPayload {\n        return { type: TaskAssigneeActions.REMOVE, payload };\n    }\n\n    RemoveSuccess(payload: ITaskAssignee): IActionWithPayload {\n        return { type: TaskAssigneeActions.REMOVE_SUCCESS, payload };\n    }\n}\n","import { Action } from '@ngrx/store';\nimport { IActionWithPayload } from '../models';\nimport { ITaskNote } from '../reducers/tasknote';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskNoteActions {\n\n    static LOAD_ALL = '[TaskNote] LOAD_ALL';\n    static LOAD_ALL_SUCCESS = '[TaskNote] LOAD_ALL_SUCCESS';\n    static LOAD_ONE = '[TaskNote] LOAD_ONE';\n    static LOAD_ONE_SUCCESS = '[TaskNote] LOAD_ONE_SUCCESS';\n    static ADD = '[TaskNote] ADD';\n    static ADD_SUCCESS = '[TaskNote] ADD_SUCCESS';\n    static UPDATE = '[TaskNote] UPDATE';\n    static UPDATE_SUCCESS = '[TaskNote] UPDATE_SUCCESS';\n    static REMOVE = '[TaskNote] REMOVE';\n    static REMOVE_SUCCESS = '[TaskNote] REMOVE_SUCCESS';\n\n    LoadAll(): Action {\n        return { type: TaskNoteActions.LOAD_ALL };\n    }\n\n    LoadAllSuccess(payload: ITaskNote[]): IActionWithPayload {\n        return { type: TaskNoteActions.LOAD_ALL_SUCCESS, payload };\n    }\n\n    LoadOne(payload: number): IActionWithPayload {\n        return { type: TaskNoteActions.LOAD_ONE, payload };\n    }\n\n    LoadOneSuccess(payload: ITaskNote): IActionWithPayload {\n        return { type: TaskNoteActions.LOAD_ONE_SUCCESS, payload };\n    }\n\n    Add(payload: ITaskNote): IActionWithPayload {\n        return { type: TaskNoteActions.ADD, payload };\n    }\n\n    AddSuccess(payload: ITaskNote): IActionWithPayload {\n        return { type: TaskNoteActions.ADD_SUCCESS, payload };\n    }\n\n    Update(payload: ITaskNote): IActionWithPayload {\n        return { type: TaskNoteActions.UPDATE, payload };\n    }\n\n    UpdateSuccess(payload: ITaskNote): IActionWithPayload {\n        return { type: TaskNoteActions.UPDATE_SUCCESS, payload };\n    }\n\n    Remove(payload: ITaskNote): IActionWithPayload {\n        return { type: TaskNoteActions.REMOVE, payload };\n    }\n\n    RemoveSuccess(payload: ITaskNote): IActionWithPayload {\n        return { type: TaskNoteActions.REMOVE_SUCCESS, payload };\n    }\n}\n","import { Action } from '@ngrx/store';\nimport { IActionWithPayload } from '../models';\nimport { ITaskStatus } from '../reducers/taskstatus';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskStatusActions {\n\n    static LOAD_ALL = '[TaskStatus] LOAD_ALL';\n    static LOAD_ALL_SUCCESS = '[TaskStatus] LOAD_ALL_SUCCESS';\n    static LOAD_ONE = '[TaskStatus] LOAD_ONE';\n    static LOAD_ONE_SUCCESS = '[TaskStatus] LOAD_ONE_SUCCESS';\n\n    LoadAll(): Action {\n        return { type: TaskStatusActions.LOAD_ALL };\n    }\n\n    LoadAllSuccess(payload: ITaskStatus[]): IActionWithPayload {\n        return { type: TaskStatusActions.LOAD_ALL_SUCCESS, payload };\n    }\n\n    LoadOne(payload: number): IActionWithPayload {\n        return { type: TaskStatusActions.LOAD_ONE, payload };\n    }\n\n    LoadOneSuccess(payload: ITaskStatus): IActionWithPayload {\n        return { type: TaskStatusActions.LOAD_ONE_SUCCESS, payload };\n    }\n\n}\n","import { Action } from '@ngrx/store';\nimport { IActionWithPayload } from '../models';\nimport { IUser } from '../reducers/user';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserActions {\n\n    static LOAD_ALL = '[User] LOAD_ALL';\n    static LOAD_ALL_SUCCESS = '[User] LOAD_ALL_SUCCESS';\n    static LOAD_ONE = '[User] LOAD_ONE';\n    static LOAD_ONE_SUCCESS = '[User] LOAD_ONE_SUCCESS';\n\n    LoadAll(): Action {\n        return { type: UserActions.LOAD_ALL };\n    }\n\n    LoadAllSuccess(payload: IUser[]): IActionWithPayload {\n        return { type: UserActions.LOAD_ALL_SUCCESS, payload };\n    }\n\n    LoadOne(payload: number): IActionWithPayload {\n        return { type: UserActions.LOAD_ONE, payload };\n    }\n\n    LoadOneSuccess(payload: IUser): IActionWithPayload {\n        return { type: UserActions.LOAD_ONE_SUCCESS, payload };\n    }\n\n}\n","import { Actions, ofType } from '@ngrx/effects';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\n\nimport { APIService } from '../services/api';\nimport { HttpActions } from './actions';\nimport { IActionWithPayload } from './models';\nimport { Injectable } from '@angular/core';\nimport { of } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class APIBaseEffects {\n\n    protected url = '';\n\n    get apiUrl() {\n        return this.url;\n    }\n\n    protected _all$ = (\n        actionOfType: string, successOfType: string\n    ) => this.updates$.pipe(\n        ofType(actionOfType),\n        mergeMap(action =>\n            this.service$.all(this.apiUrl).pipe(\n                map(data => ({type: successOfType, payload: data})),\n                catchError(res => of({type: HttpActions.HTTP_ERROR, payload: res}))\n            )\n        )\n    )\n\n    protected _one$ = (\n        actionOfType: string, successOfType: string\n    ) => this.updates$.pipe(\n        ofType(actionOfType),\n        map((action: IActionWithPayload) => action.payload),\n        mergeMap(id =>\n            this.service$.one(this.apiUrl, id).pipe(\n                map(data => ({type: successOfType, payload: data})),\n                catchError(res => of({type: HttpActions.HTTP_ERROR, payload: res}))\n            )\n        )\n    )\n\n    protected _add$ = (\n        actionOfType: string, successOfType: string\n    ) => this.updates$.pipe(\n        ofType(actionOfType),\n        map((action: IActionWithPayload) => action.payload),\n        mergeMap(obj =>\n            this.service$.create(this.apiUrl, obj).pipe(\n                map(data => ({type: successOfType, payload: data})),\n                catchError(res => of({type: HttpActions.HTTP_ERROR, payload: res}))\n            )\n        )\n    )\n\n    protected _update$ = (\n        actionOfType: string, successOfType: string\n    ) => this.updates$.pipe(\n        ofType(actionOfType),\n        map((action: IActionWithPayload) => action.payload),\n        mergeMap(obj =>\n            this.service$.update(this.apiUrl, obj).pipe(\n                map(data => ({type: successOfType, payload: data})),\n                catchError(res => of({type: HttpActions.HTTP_ERROR, payload: res}))\n            )\n        )\n    )\n\n    protected _patch$ = (\n        actionOfType: string, successOfType: string\n    ) => this.updates$.pipe(\n        ofType(actionOfType),\n        map((action: IActionWithPayload) => action.payload),\n        mergeMap(obj =>\n            this.service$.patch(this.apiUrl, obj).pipe(\n                map(data => ({type: successOfType, payload: data})),\n                catchError(res => of({type: HttpActions.HTTP_ERROR, payload: res}))\n            )\n        )\n    )\n\n    protected _remove$ = (\n        actionOfType: string, successOfType: string\n    ) => this.updates$.pipe(\n        ofType(actionOfType),\n        map((action: IActionWithPayload) => action.payload),\n        mergeMap(obj =>\n            this.service$.remove(this.apiUrl, obj).pipe(\n                map(data => ({type: successOfType, payload: data})),\n                catchError(res => of({type: HttpActions.HTTP_ERROR, payload: res}))\n            )\n        )\n    )\n\n    constructor(\n        protected updates$: Actions,\n        protected service$: APIService) {\n    }\n}\n","import { APIBaseEffects } from '../api';\nimport { Effect } from '@ngrx/effects';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ClientEffects extends APIBaseEffects {\n    protected url = '/api/clients/';\n    protected prefix = '[Client]';\n\n    @Effect() all$ = this._all$(\n        `${this.prefix} LOAD_ALL`,\n        `${this.prefix} LOAD_ALL_SUCCESS`\n    );\n    @Effect() one$ = this._one$(\n        `${this.prefix} LOAD_ONE`,\n        `${this.prefix} LOAD_ONE_SUCCESS`\n    );\n    @Effect() add$ = this._add$(\n        `${this.prefix} ADD`,\n        `${this.prefix} ADD_SUCCESS`\n    );\n    @Effect() update$ = this._update$(\n        `${this.prefix} UPDATE`,\n        `${this.prefix} UPDATE_SUCCESS`\n    );\n    @Effect() remove$ = this._remove$(\n        `${this.prefix} REMOVE`,\n        `${this.prefix} REMOVE_SUCCESS`\n    );\n\n}\n","import * as actions from '../actions';\n\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Injectable } from '@angular/core';\nimport { mergeMap } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DataEffects {\n\n    @Effect() loadData$ = this.updates$.pipe(\n        ofType(actions.DataActions.LOAD_DATA),\n        mergeMap(\n            () => {\n                return [\n                    new actions.ClientActions().LoadAll(),\n                    new actions.JobActions().LoadAll(),\n                    new actions.MeActions().Load(),\n                    new actions.TaskActions().LoadAll(),\n                    new actions.TaskAssigneeActions().LoadAll(),\n                    new actions.TaskNoteActions().LoadAll(),\n                    new actions.TaskStatusActions().LoadAll(),\n                    new actions.UserActions().LoadAll()\n                ];\n            }\n        )\n    );\n\n    constructor(\n        private updates$: Actions\n    ) {}\n}\n","import { ClientEffects } from './client';\nimport { DataEffects } from './data';\nimport { JobEffects } from './job';\nimport { MeEffects } from './me';\nimport { TaskAssigneeEffects } from './taskassignee';\nimport { TaskEffects } from './task';\nimport { TaskNoteEffects } from './tasknote';\nimport { TaskStatusEffects } from './taskstatus';\nimport { UserEffects } from './user';\n\nexport const effects = [\n    ClientEffects,\n    DataEffects,\n    JobEffects,\n    MeEffects,\n    TaskEffects,\n    TaskAssigneeEffects,\n    TaskNoteEffects,\n    TaskStatusEffects,\n    UserEffects\n];\n","import { APIBaseEffects } from '../api';\nimport { Effect } from '@ngrx/effects';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class JobEffects extends APIBaseEffects {\n    protected url = '/api/jobs/';\n    protected prefix = '[Job]';\n\n    @Effect() all$ = this._all$(\n        `${this.prefix} LOAD_ALL`,\n        `${this.prefix} LOAD_ALL_SUCCESS`\n    );\n    @Effect() one$ = this._one$(\n        `${this.prefix} LOAD_ONE`,\n        `${this.prefix} LOAD_ONE_SUCCESS`\n    );\n    @Effect() add$ = this._add$(\n        `${this.prefix} ADD`,\n        `${this.prefix} ADD_SUCCESS`\n    );\n    @Effect() update$ = this._update$(\n        `${this.prefix} UPDATE`,\n        `${this.prefix} UPDATE_SUCCESS`\n    );\n    @Effect() remove$ = this._remove$(\n        `${this.prefix} REMOVE`,\n        `${this.prefix} REMOVE_SUCCESS`\n    );\n\n}\n","import { APIBaseEffects } from '../api';\nimport { Effect } from '@ngrx/effects';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class MeEffects extends APIBaseEffects {\n    protected url = '/api/users/me/';\n    protected prefix = '[Me]';\n\n    @Effect() load$ = this._all$(\n        `${this.prefix} LOAD`,\n        `${this.prefix} LOAD_SUCCESS`\n    );\n\n}\n","import { APIBaseEffects } from '../api';\nimport { Effect } from '@ngrx/effects';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskEffects extends APIBaseEffects {\n    protected url = '/api/tasks/';\n    protected prefix = '[Task]';\n\n    @Effect() all$ = this._all$(\n        `${this.prefix} LOAD_ALL`,\n        `${this.prefix} LOAD_ALL_SUCCESS`\n    );\n    @Effect() one$ = this._one$(\n        `${this.prefix} LOAD_ONE`,\n        `${this.prefix} LOAD_ONE_SUCCESS`\n    );\n    @Effect() add$ = this._add$(\n        `${this.prefix} ADD`,\n        `${this.prefix} ADD_SUCCESS`\n    );\n    @Effect() update$ = this._update$(\n        `${this.prefix} UPDATE`,\n        `${this.prefix} UPDATE_SUCCESS`\n    );\n    @Effect() patch$ = this._patch$(\n        `${this.prefix} PATCH`,\n        `${this.prefix} PATCH_SUCCESS`\n    );\n    @Effect() remove$ = this._remove$(\n        `${this.prefix} REMOVE`,\n        `${this.prefix} REMOVE_SUCCESS`\n    );\n\n}\n","import { APIBaseEffects } from '../api';\nimport { Effect } from '@ngrx/effects';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskAssigneeEffects extends APIBaseEffects {\n    protected url = '/api/task-assignees/';\n    protected prefix = '[TaskAssignee]';\n\n    @Effect() all$ = this._all$(\n        `${this.prefix} LOAD_ALL`,\n        `${this.prefix} LOAD_ALL_SUCCESS`\n    );\n    @Effect() one$ = this._one$(\n        `${this.prefix} LOAD_ONE`,\n        `${this.prefix} LOAD_ONE_SUCCESS`\n    );\n    @Effect() add$ = this._add$(\n        `${this.prefix} ADD`,\n        `${this.prefix} ADD_SUCCESS`\n    );\n    @Effect() update$ = this._update$(\n        `${this.prefix} UPDATE`,\n        `${this.prefix} UPDATE_SUCCESS`\n    );\n    @Effect() patch$ = this._patch$(\n        `${this.prefix} PATCH`,\n        `${this.prefix} PATCH_SUCCESS`\n    );\n    @Effect() remove$ = this._remove$(\n        `${this.prefix} REMOVE`,\n        `${this.prefix} REMOVE_SUCCESS`\n    );\n\n}\n","import { APIBaseEffects } from '../api';\nimport { Effect } from '@ngrx/effects';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskNoteEffects extends APIBaseEffects {\n    protected url = '/api/task-notes/';\n    protected prefix = '[TaskNote]';\n\n    @Effect() all$ = this._all$(\n        `${this.prefix} LOAD_ALL`,\n        `${this.prefix} LOAD_ALL_SUCCESS`\n    );\n    @Effect() one$ = this._one$(\n        `${this.prefix} LOAD_ONE`,\n        `${this.prefix} LOAD_ONE_SUCCESS`\n    );\n    @Effect() add$ = this._add$(\n        `${this.prefix} ADD`,\n        `${this.prefix} ADD_SUCCESS`\n    );\n    @Effect() update$ = this._update$(\n        `${this.prefix} UPDATE`,\n        `${this.prefix} UPDATE_SUCCESS`\n    );\n    @Effect() remove$ = this._remove$(\n        `${this.prefix} REMOVE`,\n        `${this.prefix} REMOVE_SUCCESS`\n    );\n\n}\n","import { APIBaseEffects } from '../api';\nimport { Effect } from '@ngrx/effects';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskStatusEffects extends APIBaseEffects {\n    protected url = '/api/task-statuses/';\n    protected prefix = '[TaskStatus]';\n\n    @Effect() all$ = this._all$(\n        `${this.prefix} LOAD_ALL`,\n        `${this.prefix} LOAD_ALL_SUCCESS`\n    );\n    @Effect() one$ = this._one$(\n        `${this.prefix} LOAD_ONE`,\n        `${this.prefix} LOAD_ONE_SUCCESS`\n    );\n\n}\n","import { APIBaseEffects } from '../api';\nimport { Effect } from '@ngrx/effects';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserEffects extends APIBaseEffects {\n    protected url = '/api/users/';\n    protected prefix = '[User]';\n\n    @Effect() all$ = this._all$(\n        `${this.prefix} LOAD_ALL`,\n        `${this.prefix} LOAD_ALL_SUCCESS`\n    );\n    @Effect() one$ = this._one$(\n        `${this.prefix} LOAD_ONE`,\n        `${this.prefix} LOAD_ONE_SUCCESS`\n    );\n\n}\n","import * as _ from 'lodash';\n\nimport { IActionWithPayload } from './models';\n\nexport function reduceState (state: any, action: IActionWithPayload, type: string) {\n    switch (type) {\n        case 'REPLACE_ALL':\n            return action.payload;\n\n        case 'REPLACE_ONE':\n            const index = _.findIndex(state, { id: action.payload.id });\n            if (index >= 0) {\n                // only replace the data if its not the same to avoid a state change\n                if (_.isEqual(state[index], action.payload)) {\n                    return state;\n                } else {\n                    return [\n                        ...state.slice(0, index),\n                        action.payload,\n                        ...state.slice(index + 1)\n                    ];\n                }\n            }\n            return [...state, action.payload];\n\n        case 'ADD_ONE':\n            return [...state, action.payload];\n\n        case 'REMOVE_ONE':\n            return _.filter(state, (obj: any) => obj.id !== action.payload.id);\n\n        default:\n            return state;\n    }\n}\n","import { reduceState } from '../generics';\n\nexport interface IClient {\n    id?: number;\n    name: string;\n    colour: string;\n    phone_number?: string;\n    email_address?: string;\n    website?: string;\n    address?: string;\n    notes?: string;\n}\n\nexport type State = IClient[];\n\nexport const initialState: State = [];\n\nexport function reducer(state = initialState, action: any): State {\n    const actionPrefix = '[Client]';\n    switch (action.type) {\n\n        // Replace all objects\n        case `${actionPrefix} LOAD_ALL_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ALL');\n        }\n\n        // Basic CRUD actions\n        case `${actionPrefix} LOAD_ONE_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ONE');\n        }\n\n        case `${actionPrefix} ADD_SUCCESS`: {\n            return reduceState(state, action, 'ADD_ONE');\n        }\n\n        case `${actionPrefix} UPDATE_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ONE');\n        }\n\n        case `${actionPrefix} REMOVE_SUCCESS`: {\n            return reduceState(state, action, 'REMOVE_ONE');\n        }\n\n        default:\n            return state;\n    }\n}\n","import * as _ from 'lodash';\n\nexport interface IFilter {\n    client: number;\n    job: number;\n    overdue: boolean;\n    user: number;\n}\n\nexport type State = IFilter;\n\nexport const initialState: State = {\n    client: null,\n    job: null,\n    overdue: null,\n    user: null\n};\n\nexport function reducer(state = initialState, action: any): State {\n    const actionPrefix = '[Filter]';\n    \n    switch (action.type) {\n\n        case `${actionPrefix} CLIENT`: {\n            return _.assign({}, state, { client: action.payload })\n        }\n\n        case `${actionPrefix} JOB`: {\n            return _.assign({}, state, { job: action.payload })\n        }\n\n        case `${actionPrefix} OVERDUE`: {\n            return _.assign({}, state, { overdue: action.payload })\n        }\n\n        case `${actionPrefix} USER`: {\n            return _.assign({}, state, { user: action.payload })\n        }\n\n        default:\n            return state;\n    }\n}\n","import { IClient } from './client';\nimport { reduceState } from '../generics';\n\nexport interface IJob {\n    id?: number;\n    title: string;\n    description?: string;\n    created_at?: string;\n    client: number;\n    type: number;\n    estimated_hours?: string;\n    colour: string;\n    status: number;\n    billed_to?: string;\n    allocated_hours?: string;\n    time_spent_hours?: string;\n    _client?: IClient;\n}\n\nexport type State = IJob[];\n\nexport const initialState: State = [];\n\nexport function reducer(state = initialState, action: any): State {\n    const actionPrefix = '[Job]';\n    switch (action.type) {\n\n        // Replace all objects\n        case `${actionPrefix} LOAD_ALL_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ALL');\n        }\n\n        // Basic CRUD actions\n        case `${actionPrefix} LOAD_ONE_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ONE');\n        }\n\n        case `${actionPrefix} ADD_SUCCESS`: {\n            return reduceState(state, action, 'ADD_ONE');\n        }\n\n        case `${actionPrefix} UPDATE_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ONE');\n        }\n\n        case `${actionPrefix} REMOVE_SUCCESS`: {\n            return reduceState(state, action, 'REMOVE_ONE');\n        }\n\n        default:\n            return state;\n    }\n}\n","import { reduceState } from '../generics';\n\nexport interface IMe {\n    id: number;\n    full_name: string;\n    initials: string;\n}\n\nexport type State = IMe;\n\nexport const initialState: State = {\n    id: null,\n    full_name: '',\n    initials: ''\n};\n\nexport function reducer(state = initialState, action: any): State {\n    const actionPrefix = '[Me]';\n    switch (action.type) {\n\n        // primarily used when state is a single object\n        case `${actionPrefix} LOAD_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ALL');\n        }\n\n        default:\n            return state;\n    }\n}\n","import { IJob } from './job';\nimport { ITaskAssignee } from './taskassignee';\nimport { ITaskNote } from './tasknote';\nimport { ITaskStatus } from './taskstatus';\nimport { reduceState } from '../generics';\n\nexport interface ITask {\n    id?: number;\n    title: string;\n    description?: string;\n    created_at?: string;\n    job: number;\n    status: number;\n    target_date?: string;\n    closed?: boolean;\n    not_chargeable?: boolean;\n    time_spent_hours?: string;\n    allocated_hours?: string;\n    is_overdue?: boolean;\n    order: number;\n    tags: string[];\n    _job?: IJob;\n    _assignees?: ITaskAssignee[];\n    _notes?: ITaskNote[];\n    _status?: ITaskStatus[];\n}\n\nexport type State = ITask[];\n\nexport const initialState: State = [];\n\nexport function reducer(state = initialState, action: any): State {\n    const actionPrefix = '[Task]';\n    switch (action.type) {\n\n        // Replace all objects\n        case `${actionPrefix} LOAD_ALL_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ALL');\n        }\n\n        // Basic CRUD actions\n        case `${actionPrefix} LOAD_ONE_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ONE');\n        }\n\n        case `${actionPrefix} ADD_SUCCESS`: {\n            return reduceState(state, action, 'ADD_ONE');\n        }\n\n        case `${actionPrefix} UPDATE_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ONE');\n        }\n\n        case `${actionPrefix} PATCH_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ONE');\n        }\n\n        case `${actionPrefix} REMOVE_SUCCESS`: {\n            return reduceState(state, action, 'REMOVE_ONE');\n        }\n\n        default:\n            return state;\n    }\n}\n","import { reduceState } from '../generics';\n\nexport interface ITaskAssignee {\n    id?: number;\n    task: number;\n    user: number;\n    allocated_hours: string;\n    order: number;\n}\n\nexport type State = ITaskAssignee[];\n\nexport const initialState: State = [];\n\nexport function reducer(state = initialState, action: any): State {\n    const actionPrefix = '[TaskAssignee]';\n    switch (action.type) {\n\n        // Replace all objects\n        case `${actionPrefix} LOAD_ALL_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ALL');\n        }\n\n        // Basic CRUD actions\n        case `${actionPrefix} LOAD_ONE_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ONE');\n        }\n\n        case `${actionPrefix} ADD_SUCCESS`: {\n            return reduceState(state, action, 'ADD_ONE');\n        }\n\n        case `${actionPrefix} UPDATE_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ONE');\n        }\n\n        case `${actionPrefix} PATCH_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ONE');\n        }\n\n        case `${actionPrefix} REMOVE_SUCCESS`: {\n            return reduceState(state, action, 'REMOVE_ONE');\n        }\n\n        default:\n            return state;\n    }\n}\n","import { reduceState } from '../generics';\n\nexport interface ITaskNote {\n    id?: number;\n    task: number;\n    note: string;\n    user?: number;\n    created_at?: string;\n    updated_at?: string;\n}\n\nexport type State = ITaskNote[];\n\nexport const initialState: State = [];\n\nexport function reducer(state = initialState, action: any): State {\n    const actionPrefix = '[TaskNote]';\n    switch (action.type) {\n\n        // Replace all objects\n        case `${actionPrefix} LOAD_ALL_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ALL');\n        }\n\n        // Basic CRUD actions\n        case `${actionPrefix} LOAD_ONE_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ONE');\n        }\n\n        case `${actionPrefix} ADD_SUCCESS`: {\n            return reduceState(state, action, 'ADD_ONE');\n        }\n\n        case `${actionPrefix} UPDATE_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ONE');\n        }\n\n        case `${actionPrefix} REMOVE_SUCCESS`: {\n            return reduceState(state, action, 'REMOVE_ONE');\n        }\n\n        default:\n            return state;\n    }\n}\n","import { reduceState } from '../generics';\n\nexport interface ITaskStatus {\n    id: number;\n    title: string;\n    order: number;\n}\n\nexport type State = ITaskStatus[];\n\nexport const initialState: State = [];\n\nexport function reducer(state = initialState, action: any): State {\n    const actionPrefix = '[TaskStatus]';\n    switch (action.type) {\n\n        // Replace all objects\n        case `${actionPrefix} LOAD_ALL_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ALL');\n        }\n\n        // Basic CRUD actions\n        case `${actionPrefix} LOAD_ONE_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ONE');\n        }\n\n        default:\n            return state;\n    }\n}\n","import { reduceState } from '../generics';\n\nexport interface IUser {\n    id: number;\n    full_name: string;\n    initials: string;\n}\n\nexport type State = IUser[];\n\nexport const initialState: State = [];\n\nexport function reducer(state = initialState, action: any): State {\n    const actionPrefix = '[User]';\n    switch (action.type) {\n\n        // Replace all objects\n        case `${actionPrefix} LOAD_ALL_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ALL');\n        }\n\n        // Basic CRUD actions\n        case `${actionPrefix} LOAD_ONE_SUCCESS`: {\n            return reduceState(state, action, 'REPLACE_ONE');\n        }\n\n        default:\n            return state;\n    }\n}\n","import * as _ from 'lodash';\n\nimport { getClientState, getJobState } from '../state';\n\nimport { createSelector } from '@ngrx/store';\n\nexport const getJobCollection = createSelector(\n    getClientState,\n    getJobState,\n    (clients, jobs) => {\n        const objects = _.map(jobs, (job) => {\n            return _.assign({}, job, {\n                _client: _.find(clients, ['id', job.client])\n            });\n        });\n        return _.orderBy(objects, ['title'], ['asc']);\n    }\n);\n","import * as _ from 'lodash';\n\nimport { getTaskAssigneeState, getTaskNoteState, getTaskState } from '../state';\n\nimport { createSelector } from '@ngrx/store';\nimport { getJobCollection } from './job';\nimport { getTaskStatusState } from '../state';\n\nexport const getTaskNotes = createSelector(\n    getTaskNoteState,\n    (notes) => _.orderBy(notes, ['updated_at'], ['desc'])\n);\n\nexport const getTaskCollection = createSelector(\n    getJobCollection,\n    getTaskState,\n    getTaskAssigneeState,\n    getTaskNotes,\n    getTaskStatusState,\n    (jobs, tasks, assignees, notes, statuses) => {\n        const objects = _.map(tasks, (task) => {\n            const foundAssignees = _.filter(assignees, ['task', task.id]);\n            return _.assign({}, task, {\n                _job: _.find(jobs, ['id', task.job]),\n                _assignees: foundAssignees,\n                _notes: _.filter(notes, ['task', task.id]),\n                _status: _.find(statuses, ['id', task.status]),\n                _allocated_hours: _.sumBy(foundAssignees, a => +a.allocated_hours).toFixed(2)\n            });\n        });\n        return _.orderBy(objects, ['order'], ['asc']);\n    }\n);\n\nexport const getTaskCollectionById = (id) => createSelector(\n    getTaskCollection,\n    (tasks) => _.find(tasks, ['id', id])\n);\n\nexport const getTaskAssigneeCollection = createSelector(\n    getTaskAssigneeState,\n    getTaskCollection,\n    (assignees, tasks) => {\n        const objects = _.map(assignees, assignee => {\n            return _.assign({}, assignee, {\n                _task: _.find(tasks, ['id', assignee.task])\n            });\n        })\n        return _.orderBy(objects, ['order'], ['asc']);\n    }\n);\n","import * as _ from 'lodash'\n\nimport { getFilterState, getTaskStatusState } from './../state';\nimport { getTaskAssigneeCollection, getTaskCollection } from './task';\n\nimport { createSelector } from '@ngrx/store';\n\nexport const getTaskAssigneesForTaskboard = createSelector(\n    getFilterState,\n    getTaskStatusState,\n    getTaskAssigneeCollection,\n    (filters, statuses, assignees) => _.map(statuses, status => {\n        let foundAssignees = _.filter(assignees, ['_task.status', status.id]);\n        if (filters.user) {\n            foundAssignees = _.filter(foundAssignees, ['user', filters.user])\n        }\n        if (filters.client) {\n            foundAssignees = _.filter(foundAssignees, ['_task._job.client', filters.client])\n        }\n        if (filters.job) {\n            foundAssignees = _.filter(foundAssignees, ['_task.job', filters.job])\n        }\n        if (filters.overdue === true) {\n            foundAssignees = _.filter(foundAssignees, ['_task.is_overdue', filters.overdue])\n        }\n        return _.assign({}, status, {\n            _assignees: foundAssignees\n        });\n    })\n);\n\nexport const getStatsForTaskboard = createSelector(\n    getFilterState,\n    getTaskCollection,\n    (filters, tasks) => {\n        let foundTasks = tasks;\n        if (filters.user) {\n            foundTasks = _.filter(foundTasks, { _assignees: [{'user': filters.user}] })\n        }\n        if (filters.client) {\n            foundTasks = _.filter(foundTasks, ['_job.client', filters.client])\n        }\n        if (filters.job) {\n            foundTasks = _.filter(foundTasks, ['job', filters.job])\n        }\n        if (filters.overdue === true) {\n            foundTasks = _.filter(foundTasks, ['is_overdue', filters.overdue])\n        }\n        return {\n            count_of_tasks: foundTasks.length,\n            allocated_hours: _.sumBy(foundTasks, t => +t.allocated_hours).toFixed(2),\n            count_of_overdue: _.filter(foundTasks, t => t.is_overdue).length\n        }\n    }\n);\n","import * as _ from 'lodash';\n\nimport { createSelector } from '@ngrx/store';\nimport { getUserState } from '../state';\n\nexport const getUserById = (id) => createSelector(\n  getUserState,\n  (users) => _.find(users, ['id', id])\n);\n","import * as fromClient from './reducers/client';\nimport * as fromFilter from './reducers/filter';\nimport * as fromJob from './reducers/job';\nimport * as fromMe from './reducers/me';\nimport * as fromTask from './reducers/task';\nimport * as fromTaskAssignee from './reducers/taskassignee';\nimport * as fromTaskNote from './reducers/tasknote';\nimport * as fromTaskStatus from './reducers/taskstatus';\nimport * as fromUser from './reducers/user';\n\nimport { ActionReducerMap, createFeatureSelector } from '@ngrx/store';\n\nexport interface AppState {\n    clients: fromClient.State;\n    filters: fromFilter.State;\n    jobs: fromJob.State;\n    me: fromMe.State;\n    tasks: fromTask.State;\n    task_assignees: fromTaskAssignee.State;\n    task_notes: fromTaskNote.State;\n    task_statuses: fromTaskStatus.State;\n    users: fromUser.State;\n}\n\nexport const reducers: ActionReducerMap<AppState> = {\n    clients: fromClient.reducer,\n    filters: fromFilter.reducer,\n    jobs: fromJob.reducer,\n    me: fromMe.reducer,\n    tasks: fromTask.reducer,\n    task_assignees: fromTaskAssignee.reducer,\n    task_notes: fromTaskNote.reducer,\n    task_statuses: fromTaskStatus.reducer,\n    users: fromUser.reducer\n};\n\nexport const getClientState = createFeatureSelector<fromClient.State>('clients');\nexport const getFilterState = createFeatureSelector<fromFilter.State>('filters');\nexport const getJobState = createFeatureSelector<fromJob.State>('jobs');\nexport const getMeState = createFeatureSelector<fromMe.State>('me');\nexport const getTaskState = createFeatureSelector<fromTask.State>('tasks');\nexport const getTaskAssigneeState = createFeatureSelector<fromTaskAssignee.State>('task_assignees');\nexport const getTaskNoteState = createFeatureSelector<fromTaskNote.State>('task_notes');\nexport const getTaskStatusState = createFeatureSelector<fromTaskStatus.State>('task_statuses');\nexport const getUserState = createFeatureSelector<fromUser.State>('users');\n","export const environment = {\n  production: false,\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}